public class Strings {

/** Given a two strings (one smaller than the other), find if the smaller
  * is part of the larger and return the index of the first occurrence of the smaller
  * return -1 otherwise */

// Can change this problem to return true or false too

public int stringContains(String larger, String smaller) {
        int largerSize = larger.length();
        int smallerSize = smaller.length();
        int j = 0;
        for (int i = 0; i < largerSize - smallerSize + 1; i++) { //j will iterate i+j times so if i==largerSize the i+j will have a value
        //of out of bounds at some point
            for (j = 0; j < smallerSize; j++) { //open for loop everytime I hit index i
                if (larger.charAt(i + j) != smaller.charAt(j)) {
                    break;
                }
            }
            if (j == smallerSize) { //check if inner for loop terminated on break or because it matched
                return i;
            }
        }
        return -1;
    }
    
/** Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2 */

public String addStrings(String num1, String num2) {
      StringBuilder sb = new StringBuilder();
        int carry = 0;
        for(int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry == 1; i--, j--){
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            sb.append((x + y + carry) % 10);
            carry = (x + y + carry) / 10;
        }
        return sb.reverse().toString();
    }
    
}
