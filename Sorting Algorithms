public class Sort {

//Bubble Sort
    public void bubbleSort(int[] arr) {
        int temp = 0;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n - i; j++) {
                if (arr[j-1] > arr[j]) { // j<n-i as i number of elements have been bubbled up after each iteration
                    temp = arr[j-1];
                    arr[j-1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
    
//Insertion Sort
 public void insertionSort(int[] a) {
        int minIndex = 0;
        for(int i=0; i<a.length; i++) {
            minIndex = i;
             for(int j=i+1; j<a.length; j++) {
                 if(a[j]<a[minIndex]) {
                     minIndex = j;
                 }
             }
              if(i!=minIndex) {
                    temp = arr[i];
                    arr[i] = arr[minIndex];
                    arr[minIndex] = temp;
              }
        }
    }
    
//Selection sort

    
//Merge Sort  
     public void mergesort(int[] a, int low, int high) {
     //Base Case
        if (low >= high) {
            return;
        }
        int mid = (low + high) / 2;
        mergesort(a, low, mid); //divide array to its lowest divisible element 
        mergesort(a, mid + 1, high);
        merge(a, low, high);
    }

    public void merge(int[] a, int low, int high) {
        int[] temp = new int[high - low + 1];
        int mid = (low + high) / 2;
        int i = low;
        int j = mid + 1;
        int index = 0;
        while (i <= mid && j <= high) {
            if (a[i] < a[j]) {
                temp[index] = a[i];
                i++;
            } else {
                temp[index] = a[j];
                j++;
            }
            index++;
        }
        //copy any left out elements in either half
        while (i <= mid)
            temp[index++] = a[i++];
        while (j <= high)
            temp[index++] = a[j++];
        //change array a at the current low position
        i = low;
        for (int k = 0; k < temp.length; k++) { //high is determined by length of temp
            a[i++] = temp[k];
        }
    }
    
//Quick Sort
    
    public void quicksort(int[] a, int low, int high) {
        if (low >= high) {
            return;
        }
        int pivotIndex = partition(a, low, high);
        quicksort(a, low, pivotIndex - 1);
        quicksort(a, pivotIndex + 1, high);

    }

    private int partition(int[] a, int low, int high) {
        int pivot = a[high];
        int i = low - 1;
        for (int j = low; j <= high; j++) {
            if (a[j] <= pivot) {
                i++;
                int temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        i++;
        int pivotPos = a[i];
        a[i] = a[high];
        a[high] = pivotPos;
        return i;
    }
    //Count Sort
    //range is given
    
    public void countsort(int[] arr) {
       // int range = getMax(arr);
        int[] count = new int[arr.length];
        //store count of each value
        for (int i = 0; i < arr.length; i++) {
            count[arr[i]]++;
        }
        //go through entire range
        int index = 0;
        for (int i = 0; i <= range; i++) {
            //if a value in this range has occurred more than once
            while (count[i] > 0) {
                arr[index] = i; //add value in the index
                index++;      //increment index
                count[i]--;   //decrement number of times the value occurred in count array
            }
        }
    }

    
    public static void main(String[] args) {
        Sort sortObj = new Sort();
        int[] a = {2,9,61,1,8,3,9,4};
        sortObj.bubbleSort(a);
        sortObj.mergeSort(a, 0, a.length-1);
        sortObj.insertionSort(a);
        sortObj.quicksort(a, 0, a.length-1);
    }
}
