public class DynamicProgramming {
		
/**
* Return the nth Fibonacci Number
*/

public int fibonacci(int n) {
	int[] fibVals = new int[n];
	fibVals[0] = 1;
	fibVals[1] = 1;
	for(int i = 2; i < n; i++) {
		fibVals[i] = fibVals[i - 1] + fibVals[i - 2];
	}
		return fibVals[n - 1];
	}
	
/**
 * Say you have an array for which the ith element is the price of a given stock on day i.
 * If you were only permitted to complete at most one transaction (ie, buy one and 
 * sell one share of the stock), design an algorithm to find the maximum profit.
 */
   
   public int bestProfit(int[] prices) {
    int size = prices.length;
    int[] profits = new int[size];
    int min = Integer.MAX_VALUE;
    for(int i=0; i<size;l i++) {
      if(min>prices[i]) {
        min = prices[i];
      }
     profits[i] = prices[i]-min;
    }
    int max = getMaxValue(profits);
    return max;
   }
   
   private int getMaxValue(int[] profits) {
   int size = profits.length;
   int max = Integer.MIN_VALUE;
   for(int i=0; i<size; i++) {
   	if(max<profits[i]) {
	max = profits[i];
	}
   }
    return max;
   }
   
   //Optimization
   public int bestProfit(int[] prices) {
	int size = prices.length;
	int min = Integer.MAX_VALUE;
	int max = Integer.MIN_VALUE;
		
	for(int i = 0; i < size; i++) {
		if(min > prices[i]) {
			min = prices[i];
		}	
			
	int mayBeMax = prices[i] - min;
	if(max < mayBeMax) {
		max = mayBeMax;
	}
	}
	 return max;
	}
   
   }
