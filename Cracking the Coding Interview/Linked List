
/**
* Remove Dups: Write code to remove duplicates from an unsorted linked list.
* FOLLOW UP
* How would you solve this problem if a temporary buffer is not allowed?
**/

 //O(N) Time complexity where N is no.of elements in Linked List
public void deleteRepeatingNode() {
        Hashtable table = new Hashtable();
        LinkedListNode prev = null;
        LinkedListNode curr = head;
        while (curr != null) {
           if(table.containsKey(curr.data)) {
               prev.next = curr.next;
           } else {
               table.put(curr.data, true);
               prev = curr;
           }
            curr = curr.next;
        }
    }

    //optimized version O(N)^2 Time complexity
    public void deleteRepeatingNode(LinkedListNode head) {
        LinkedListNode curr = head;
        while(curr!=null) {
            LinkedListNode runner = curr;
            while(runner.next!=null) {
                if(runner.next.data == curr.data) {
                    runner.next = runner.next.next;
                }else {
                    runner = runner.next;
                }
            }
            curr=curr.next;
        }
    }
    
    /**
    * Return Kth to Last: Implement an algorithm to find the kth to last element of a singly linked list.
    **/
    
     public int kthToLast(int k) {
        LinkedListNode itr1 = head;
        LinkedListNode itr2 = head;
        if(itr1 == null) {
            return 0;
        }
        for(int i=0; i<k-1; i++) {
            itr1 = itr1.next;
            if(itr1 == null ) {
                return 0;
            }
        }
        if(itr1 == null ) {
            return 0;
        }
        while(itr1.next!=null) {
            itr1 = itr1.next;
            itr2 = itr2.next;
        }
        return itr2.data;
    }
    
    /**
    * Delete Middle Node: Implement an algorithm to delete a node in the middle (i.e., any node but
    * the first and last node, not necessarily the exact middle) of a singly linked list, given only access to
    * that node.
    * EXAMPLE
    * input:the node c from the linked list a->b->c->d->e->f
    * Result: nothing is returned, but the new linked list looks like a ->b->d- >e- >f
**/
