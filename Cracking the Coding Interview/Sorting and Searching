import java.util.*

public class SS {

/*
Given a sorted array of n integers that has been rotated an unknown
number of times, write code to find an element in the array. You may assume that the array was
originally sorted in increasing order.
*/
    public int searchInRotatedArray(int[] a, int low, int high, int key) {
        //output the index of search element

        int mid = (low + high) / 2;
        if (low > high) {
            return -1;
        }
        if (key == a[mid]) {
            return mid;
        }
        if (a[low] < a[mid]) {
            if (key >= a[low] && key < a[mid]) {
                return searchInRotatedArray(a, low, mid - 1, key);
            } else {
                return searchInRotatedArray(a, mid + 1, high, key);
            }
        } else if (a[mid] < a[high]) {
            if (key > a[mid] && key <= a[high]) {
                return searchInRotatedArray(a, mid + 1, high, key);
            } else {
                return searchInRotatedArray(a, low, mid - 1, key);
            }
        } else if (a[low] == a[mid]) {
            if (a[mid] != a[high]) {
                return searchInRotatedArray(a, mid + 1, high, key);
            } else {
                int res = searchInRotatedArray(a, low, mid - 1, key);
                if (res == -1) {
                    return searchInRotatedArray(a, mid + 1, high, key);
                } else {
                    return res;
                }
            }
        }
        return -1;
    }
    
     public static void main(String[] args) {
        Sorting sort = new Sorting();
        int[] a = {15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14};
      int res = sort.searchInRotatedArray(a, 0, a.length - 1, 5);
        System.out.println(res);
}
