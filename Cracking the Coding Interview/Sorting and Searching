import java.util.*

public class SS {

/*
Given a sorted array of n integers that has been rotated an unknown
number of times, write code to find an element in the array. You may assume that the array was
originally sorted in increasing order.
*/
    public int searchInRotatedArray(int[] a, int low, int high, int key) {
        //output the index of search element

        int mid = (low + high) / 2;
        if (low > high) {
            return -1;
        }
        if (key == a[mid]) {
            return mid;
        }
        if (a[low] < a[mid]) {
            if (key >= a[low] && key < a[mid]) { //after each rotation one half of array is always sorted
                return searchInRotatedArray(a, low, mid - 1, key);
            } else {
                return searchInRotatedArray(a, mid + 1, high, key);
            }
        } else if (a[mid] < a[high]) {
            if (key > a[mid] && key <= a[high]) {
                return searchInRotatedArray(a, mid + 1, high, key);
            } else {
                return searchInRotatedArray(a, low, mid - 1, key);
            }
        } else if (a[low] == a[mid]) { //condition for repeating elements
            if (a[mid] != a[high]) {
                return searchInRotatedArray(a, mid + 1, high, key);
            } else {
                int res = searchInRotatedArray(a, low, mid - 1, key);
                if (res == -1) {
                    return searchInRotatedArray(a, mid + 1, high, key);
                } else {
                    return res;
                }
            }
        }
        return -1;
    }
    
/*
You are given two sorted arrays, A and B, where A has a large enough buffer at the
end to hold B. Write a method to merge B into A in sorted order.
*/
    public void mergeSortedArrays(int[] a, int[] b, int lastA, int lastB) {
        int mergeIndex = lastA + lastB -1;
        int indexA = lastA - 1 ;
        int indexB = lastB - 1;
        while(indexB >= 0) {  //loop for length of b[] as it is shorter than a[]
            if(indexA >= 0 && a[indexA] > a[indexB]) {
                a[mergeIndex] = a[indexA];
                indexA--;
            }else {
                a[mergeIndex] = a[indexB];
                indexB--;
            }
            mergeIndex--;
        }
    }
    
   /*
   You are given an array-like data structure Listy which lacks a size
   method. It does, however, have an elementAt ( i) method that returns the element at index i in
   0( 1) time. If i is beyond the bounds of the data structure, it returns -1. (For this reason, the data
   structure only supports positive integers.) Given a Listy which contains sorted, positive integers,
   find the index at which an element x occurs. If x occurs multiple times, you may return any index.
   */
   
    public int searchListy(Listy list, int value) {
        int index = 1;
        while(list.elementAt(index) !=-1 && list.element(index)<value) {
            index = index * 2;
        }
        
        return binarySearch(list, index/2, index,  value);//value occurs only after index/2 because index*2 is performed until value is greater than elementAt(index)

    }
    
    public int binarySearch(Listy list, int low, int high, int key) {
        int mid;
        while(low<=high) {
            mid = (low+high)/2;
            int middle = list.elementAt(mid);
            if( middle>key || middle==-1) {
            high = mid-1;
            }else if(list.element(mid) < key) {
                low = mid+1;
            }else {
                reurn mid;
            }
        }
        return -1;
    }
    
    /*
    Sparse Search: Given a sorted array of strings that is interspersed with empty strings, write a
    method to find the location of a given string.
    */
     public int sparseSearch(String[] strings, String str, int first, int last) {
        int mid = (last+first)/2;
        if(first>last) {
            return -1;
        }
        //condition if the string at midpoint is empty
        if(strings[mid].isEmpty()) {
            int left = mid-1;
            int right = mid+1;
            while(true) {
                if(left<first && right>last) {
                    return -1;
                }else if(right<=last && !strings[right].isEmpty()) {
                    mid = right;
                    break;
                }else if(left>=first && !strings[left].isEmpty()) {
                    mid=left;
                    break;
                }
                right++;
                left--;
            }
        }
        if(str.equals(strings[mid])) {
            return mid;
        }else if(strings[mid].compareTo(str) < 0) { //compareTo returns negetive value when first string has lower alphabet than the
        //next one abc with xyz
            return sparseSearch(strings, str, mid+1, last);
        }else { //xyz with abc
            return sparseSearch(strings, str, first, mid-1);
        }
    }
    
    public int search(String[] strings, String str) {
        if(strings == null || str == null || str == "") {
            return -1;
        }
        return sparseSearch(strings, str, 0, strings.length-1);
    }
    
    /*Given an M x N matrix in which each row and each column is sorted in
    ascending order, write a method to find an element.
    */
    
     public boolean sortedMatrixSearch(int[][] m, int k, int i, int j) {
        //TODO base case
        if (j >= m.length || i < 0) {
            return false;
        }
        if (m[i][j] == k) {
            return true;
        } else if ((m[i][j] < k)) {
            return sortedMatrixSearch(m, k, i, j + 1);
        } else if (m[i][j] > k) {
            return sortedMatrixSearch(m, k, i - 1, j);
        }
        return false;
    }
    
    /*
    Peaks and Valleys: In an array of integers, a "peak" is an element which is greater than or equal
    to the adjacent integers and a "valley" is an element which is less than or equal to the adjacent
    integers. For example, in the array {5, 8, 6, 2, 3, 4, 6}, {8, 6} are peaks and {5, 2} are valleys. Given an
    array of integers, sort the array into an alternating sequence of peaks and valleys.
    */
    public void sortValleyPeak(int[] array) {
        Arrays.sort(array);
        for (int i= 1; i < array.length; i += 2) {
            swap(array, i - 1, i);
           }
           for(int i=0; i< array.length; i++) {
            System.out.println(array[i]);
        }
         }

    public void swap(int[] array, int left, int right) {
              int temp = array[left];
              array[left] = array[right];
              array[right] = temp;

    
     public static void main(String[] args) {
        Sorting sort = new Sorting();
        int[] a = {15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14};
      int resRotate = sort.searchInRotatedArray(a, 0, a.length - 1, 5);
        System.out.println(resRotate);
        int[][] m = {{1,2,4},
                {2,5,7},
                {3,6,8}
        };
        int k = 1;
        int i = m.length-1;
        int j = 0;
        boolean  resMatrix = sort.sortedMatrixSearch(m, k, i, j);
        System.out.println(resMatrix);
        sort.sortValleyPeak(a);
}
