import java.util.*

public class SS {

/*
Given a sorted array of n integers that has been rotated an unknown
number of times, write code to find an element in the array. You may assume that the array was
originally sorted in increasing order.
*/
    public int searchInRotatedArray(int[] a, int low, int high, int key) {
        //output the index of search element

        int mid = (low + high) / 2;
        if (low > high) {
            return -1;
        }
        if (key == a[mid]) {
            return mid;
        }
        if (a[low] < a[mid]) {
            if (key >= a[low] && key < a[mid]) { //after each rotation one half of array is always sorted
                return searchInRotatedArray(a, low, mid - 1, key);
            } else {
                return searchInRotatedArray(a, mid + 1, high, key);
            }
        } else if (a[mid] < a[high]) {
            if (key > a[mid] && key <= a[high]) {
                return searchInRotatedArray(a, mid + 1, high, key);
            } else {
                return searchInRotatedArray(a, low, mid - 1, key);
            }
        } else if (a[low] == a[mid]) { //condition for repeating elements
            if (a[mid] != a[high]) {
                return searchInRotatedArray(a, mid + 1, high, key);
            } else {
                int res = searchInRotatedArray(a, low, mid - 1, key);
                if (res == -1) {
                    return searchInRotatedArray(a, mid + 1, high, key);
                } else {
                    return res;
                }
            }
        }
        return -1;
    }
    
/*
You are given two sorted arrays, A and B, where A has a large enough buffer at the
end to hold B. Write a method to merge B into A in sorted order.
*/
    public void mergeSortedArrays(int[] a, int[] b, int lastA, int lastB) {
        int mergeIndex = lastA + lastB -1;
        int indexA = lastA - 1 ;
        int indexB = lastB - 1;
        while(indexB >= 0) {  //loop for length of b[] as it is shorter than a[]
            if(indexA >= 0 && a[indexA] > a[indexB]) {
                a[mergeIndex] = a[indexA];
                indexA--;
            }else {
                a[mergeIndex] = a[indexB];
                indexB--;
            }
            mergeIndex--;
        }
    }
    
   /*
   You are given an array-like data structure Listy which lacks a size
method. It does, however, have an elementAt ( i) method that returns the element at index i in
0( 1) time. If i is beyond the bounds of the data structure, it returns -1. (For this reason, the data
structure only supports positive integers.) Given a Listy which contains sorted, positive integers,
find the index at which an element x occurs. If x occurs multiple times, you may return any index.
   */
   
    public int searchListy(Listy list, int value) {
        int index = 1;
        while(list.elementAt(index) !=-1 && list.element(index)<value) {
            index = index * 2;
        }
        
        return binarySearch(list, index/2, index,  value);//value occurs only after index/2 because index*2 is performed until value is greater than elementAt(index)

    }
    
    public int binarySearch(Listy list, int low, int high, int key) {
        int mid;
        while(low<=high) {
            mid = (low+high)/2;
            int middle = list.elementAt(mid);
            if( middle>key || middle==-1) {
            high = mid-1;
            }else if(list.element(mid) < key) {
                low = mid+1;
            }else {
                reurn mid;
            }
        }
        return -1;
    }
    
     public static void main(String[] args) {
        Sorting sort = new Sorting();
        int[] a = {15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14};
      int res = sort.searchInRotatedArray(a, 0, a.length - 1, 5);
        System.out.println(res);
}
