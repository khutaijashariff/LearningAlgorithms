public class Tree {

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
      val = x;
    }
  }

/*Minimal Tree: Given a sorted (increasing order) array with unique integer elements, write an
algorithm to create a binary search tree with minimal height.

leetcode: Convert Sorted Array to Binary Search Tree 

O(n) space, O(n) time */

 public TreeNode createMinimalTree(int[] arr) {
       return createMinimalTree(arr, 0, arr.length-1);

    }

    public TreeNode createMinimalTree(int[] arr, int low, int high) {
        if(low>high) {
            return null;
        }
        int mid = (high+low)/2;
        TreeNode n = new TreeNode(arr[mid]);
        n.left = createMinimalTree(arr, low, mid-1);
        n.right = createMinimalTree(arr, mid+1, high);
        return n;
    }
    
    
/*Given a binary tree, design an algorithm which creates a linked list of all the nodes
at each depth

 O(n) space, O(1) time*/

public ArrayList<LinkedList<TreeNode>> linkedListForDepth() {
        ArrayList<LinkedList<TreeNode>> result =new ArrayList<LinkedList<TreeNode>>();
        LinkedList<TreeNode> current = new LinkedList<TreeNode>();
        if(root!= null) {
        //add the root in the first linked list
            current.add(root);
        }
        while(current.size() > 0) { ////termination condition, size will be 0 after visiting leaves 
            result.add(current);
            LinkedList<TreeNode> parents = current; //save current to iterate through its children
            current = new LinkedList<TreeNode>(); //new empty linked list current
            for( TreeNode parent: parents) {
                if(parent.left!=null) {
                    current.add(parent.left);
                }
                if(parent.right!=null) {
                    current.add(parent.right);
                }
            }
        }
        return result;
  }
  
  /*Check Balanced: Implement a function to check if a binary tree is balanced. For the purposes of
this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any
node never differ by more than one.*/

public int getHeight(TreeNode root) {
       if(root == null) { //Base case
           return -1;
       }
        return Math.max(getHeight(root.left),getHeight(root.right))+1;
    }

    public boolean isBalanced(TreeNode root) {
        if(root == null) { //Base case
            return true;
        }
        int heightDiff = getHeight(root.left) - getHeight(root.right);
        if(Math.abs(heightDiff) > 1) {
            return false;
        }else { //Recurse
            return (isBalanced(root.left) && isBalanced(root.right));
        }
    }
    
    
    /*Implement a function to check if a binary tree is a binary search tree.
    
    leetcode: Validate Binary Search Tree 
    
    time complexity: O(N)(traverse n nodes) space complexity: O(log N)(on the recursion stack)*/
    
      public boolean isValidBST(TreeNode root) {
        int min = Integer.MIN_VALUE;
        int max = Integer.MAX_VALUE;
        return validate(root, min, max);
    }
    
    public boolean validate(TreeNode node, int min, int max) {
        if(node == null) {
            return true;
        }
        if(min<node.val && max>node.val) {
            return validate(node.left, min, node.val) && validate(node.right, node.val, max);
        }else {
            return false; //check every step for non compliance
        }
    }
    
/*
First Common Ancestor: Design an algorithm and write code to find the first common ancestor
of two nodes in a binary tree. Avoid storing additional nodes in a data structure. NOTE: This is not
necessarily a binary search tree.

leetcode: Lowest Common Ancestor of a Binary Tree */

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (!covers(root, p) || (!covers(root, q))) {
            return null;
        }
        return lcaHelper(root, p, q);
    }

    public TreeNode lcaHelper(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q) {
            return root;
        }
        boolean pIsOnLeft = covers(root.left, p);
        boolean qIsOnLeft = covers(root.left, q);
        if (pIsOnLeft != qIsOnLeft) {
            return root;
        }
        TreeNode childside = pIsOnLeft ? root.left : root.right;
        return lowestCommonAncestor(childside, p, q);
    }

    boolean covers(TreeNode root, TreeNode p) {
        if (root == null) return false;
        if (root == p) return true;
        return covers(root.left, p) || covers(root.right, p);
    }
    
 /* Tl and T2 are two very large binary trees, with Tl much bigger than T2. Create an
algorithm to determine ifT2 is a subtree of Tl. */

     public boolean isSubtree(TreeNode t1, TreeNode t2) {
        if(t1==null) {
            return false;
        }else if(t2 == null)  {
            return true;
        }else if(t1.data == t2.data && matchTree(t1,t2)){
            return true;
        }
        return isSubtree(t1.left, t2) || isSubtree(t1.right, t2);
    }

    public boolean matchTree(TreeNode t1, TreeNode t2) {
        if(t1 == null && t2 == null) {
            return true; //nothing left in sub tree
        }else if(t1 == null || t2 == null) {
            return false;  //exactly one tree is empty therefore trees dont match
        }else if(t1.val != t2.val) {
            return false;  //data does not match
        }else {
           return matchTree(t1.left, t2.left) && matchTree(t1.right, t2.right);
        }
    }
    
 /**
   * Paths with Sum: You are given a binary tree in which each node contains an integer value (which
   * might be positive or negative). Design an algorithm to count the number of paths that sum to a
   * given value. The path does not need to start or end at the root or a leaf, but it must go downwards
   * (traveling only from parent nodes to child nodes).
   */
   //ALgorithm for finding paths only from root
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        ArrayList<ArrayList<Integer>> paths = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> curPath = new ArrayList<Integer>();
        int curSum = 0;
        pathSum(root, paths, curPath, curSum, sum);
        //  System.out.println(paths.size());
        return paths;
    }


    private void pathSum(TreeNode node, ArrayList<ArrayList<Integer>> paths, ArrayList<Integer> curPath, int curSum, int sum) {
        if (node == null) {
            return;
        }
        if (node.left == null && node.right == null && curSum + node.data == sum) {
            ArrayList<Integer> extPath = new ArrayList<Integer>(curPath);
            extPath.add(node.data);
            paths.add(extPath);
        } else {
            int newSum = curSum + node.data;
            ArrayList<Integer> extPath = new ArrayList<Integer>(curPath);
            extPath.add(node.data);
            if (node.right != null) {
                pathSum(node.right, paths, extPath, newSum, sum);
            }
            if (node.left != null) {
                pathSum(node.left, paths, extPath, newSum, sum);
            }
        }
    }
}
