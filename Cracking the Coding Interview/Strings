public class Strings {

  //Is Unique: Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?
  
    public boolean checkUniqueCharacters(String s) {
        if(s.length() > 256) {
            return false;
        }
        boolean[] charSet  = new boolean[256];
        for(int i=0; i<s.length(); i++) {
            int index = s.charAt(i);
            if(charSet[index]) {
                return false;
            }
            charSet[index] = true;
        }
        return true;
    }

// Given two strings, write a method to decide if one is a permutation of the other

 public boolean isPermutation(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int[] charSet = new int[256];
        for (int i = 0; i < s1.length(); i++) {
            int charIndex = s1.charAt(i);
            charSet[charIndex]++;
        }
        for (int i = 0; i < s2.length(); i++) {
            int charIndex = s2.charAt(i);
            charSet[charIndex]--;
            if (charSet[charIndex] < 0) {
                return false;
            }
        }
        return true;
    }
    
    /**
    *URLify: Write a method to replace all spaces in a string with '%20'. You may assume that the string
    *has sufficient space at the end to hold the additional characters, and that you are given the "true"
    *length of the string. (Note: if implementing in Java, please use a character array so that you can
    *perform this operation in place.)
    */
    
     public void replaceSpaces(char[] s, int length) {
       int actualLength = s.length;
       int actualIterator = actualLength-1;
       for(int i=length-1; i>=0; i--) {
           if(s[i] == ' ') {
               s[actualIterator] = '0';
               s[actualIterator-1] = '2';
               s[actualIterator-2] = '%';
               actualIterator -= 3;
           } else {
               s[actualIterator] =  s[i];
               actualIterator--;
           }
       }
   }
   
   /**
    *Palindrome Permutation: Given a string, write a function to check if it is a permutation of
    *a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A
    *permutation is a rearrangement of letters. The palindrome does not need to be limited to just
    *dictionary words.
   */
   
    public boolean isPermutationOfPalindrome(String s) {
        String[] stringsArray = s.split("\\s+");
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<stringsArray.length; i++) {
            sb.append(stringsArray[i]);
        }
        String use = sb.toString();
        char[] useArray = use.toCharArray();
        Hashtable<Character, Integer> hash = new Hashtable<Character, Integer>();
        for (char c :useArray) {
            if (hash.containsKey(c)) {
                hash.put(c, hash.get(c) + 1);
            } else {
                hash.put(c, 1);
            }
        }
        if (isEven(s.length())) {
            for (int key : hash.values()) {
                if (!isEven(key)) {
                    return false;
                }
            }
        } else {
            int odd = 0;
            for (int key : hash.values())
                if (!isEven(key)) {
                    odd++;
                    if (odd > 1)
                        return false;
                }
        }
        return true;
    }

    public boolean isEven(int num) {
        if (num % 2 == 0) {
            return true;
        }
        return false;
    }
    
    /**
     *One Away: There are three types of edits that can be performed on strings: insert a character,
     *remove a character, or replace a character. Given two strings, write a function to check if they are
     *one edit (or zero edits) away.
    */
    
     public boolean oneAway(String s1, String s2) {
        if(s1.equals(s2)) { //exact same string, zero dits away
            return true;
        }else if(s1.length() == s2.length()) { //same length
            return oneReplace(s1, s2);
        }else if(s1.length() == s2.length()+1) { //s2 shorter
            return oneInsert(s2, s1);
        }else if(s1.length()+1 == s2.length()) { //s1 shorter
            return oneInsert(s1, s2);
        }
        return false;
    }

    public boolean oneReplace(String s1, String s2) {
        int edit = 0;
        for(int i=0, j=0; i<s1.length() && j<s2.length(); i++, j++) {
            if(s1.charAt(i)!=s2.charAt(i)) {
               edit++;
                if(edit>1) { //only one chacter different
                    return false;
                }
            }
        }
        return true;
    }

    public boolean oneInsert(String s1, String s2) {
        int i1 = 0;
        int i2 = 0;
        while(i1<s1.length() && i2<s2.length()) {
            if(s1.charAt(i1) != s2.charAt(i2)) {
                if(i1!=i2) { //maintain the same position on each string
                    return false;
                }
                i2++;
            }else {
                i1++;
                i2++;
            }
        }
        return true;
    }
    
    /**
     *String Compression: Implement a method to perform basic string compression using the counts
     *of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the
     *"compressed" string would not become smaller than the original string, your method should return
     *the original string. You can assume the string has only uppercase and lowercase letters (a - z).
    */
    
    public String stringCompression(String original) {
       if (original == null || original.length() == 0) {
      return original;
    }

    StringBuilder sb = new StringBuilder();
    
    char curChar = original.charAt(0);
    int count = 1;
    for (int i = 1; i < original.length(); ++i) {
      char ch = original.charAt(i);
      if (ch == curChar) {
        ++count;
      }
      else {
        sb.append(curChar);
        sb.append(count);
        curChar = ch;
        count = 1;
      }
    }  
    sb.append(curChar);
    sb.append(count);
    
        return sb.length() < original.length()? sb.toString() : original;
    }
    
    /**
     *Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and
     *column are set to 0.
    */
    
    
     public int[][] setZeroes(int[][] matrix) {
        boolean[] row = new boolean[matrix.length];
        boolean[] col = new boolean[matrix[0].length];
        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                if(matrix[i][j] == 0) {
                    row[i] = true;
                    col[j] = true;
                }
            }
        }

        for(int i=0; i<row.length; i++) {
            if(row[i]) {
                nullifyRow(matrix, i);
            }
        }

        for(int j=0; j<col.length; j++) {
            if(col[j]) {
                nullifyCol(matrix, j);
            }
        }

        return matrix;
    }

    private void nullifyRow(int[][] matrix, int row) {
        for(int j=0; j<matrix[0].length; j++) {
            matrix[row][j] = 0;
        }

    }

    private void nullifyCol(int[][] matrix, int col) {
        for(int i=0; i<matrix.length; i++) {
            matrix[i][col] = 0;
        }
      }  
        /**
         *String Rotation: Assume you have a method i 5Su b 5 tr ing which checks if one word is a substring
         *of another. Given two strings, 51 and 52, write code to check if 52 is a rotation of 51 using only one
         *call to i5Sub5tring (e.g., "waterbottle" is a rotation of" erbottlewat").
        */
        
         public boolean isRotation(String s1, String s2) {
         int len = s1.length();
         /* Check that sl and s2 are equal length and not empty*/
         if (len == s2.length() && len > 0) {
             /* Concatenate s1 and s1 within new buffer */
             String s1s1 = s1 + s1;
             //return isSubstring(s1s1, s2);
        }
         return false;
    }

    
}
