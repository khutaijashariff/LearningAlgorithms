public class Strings {

  //Is Unique: Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?
  
    public boolean checkUniqueCharacters(String s) {
        if(s.length() > 256) {
            return false;
        }
        boolean[] charSet  = new boolean[256];
        for(int i=0; i<s.length(); i++) {
            int index = s.charAt(i);
            if(charSet[index]) {
                return false;
            }
            charSet[index] = true;
        }
        return true;
    }

// Given two strings, write a method to decide if one is a permutation of the other

 public boolean isPermutation(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int[] charSet = new int[256];
        for (int i = 0; i < s1.length(); i++) {
            int charIndex = s1.charAt(i);
            charSet[charIndex]++;
        }
        for (int i = 0; i < s2.length(); i++) {
            int charIndex = s2.charAt(i);
            charSet[charIndex]--;
            if (charSet[charIndex] < 0) {
                return false;
            }
        }
        return true;
    }
    
      public static void main(String[] args) {
        Strings s = new Strings();
        //test unique characters
        String input1 = "terakfjydlighboh";
        boolean result1 = s.checkUniqueCharacters(input1);
       System.out.println(result1);
     }
}
