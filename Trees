public class Tree {
public void inOrder(TreeNode root) {
        if(root!=null) {
            inOrder(root.left);
            System.out.println(root.data);
            inOrder(root.right);
        }

    }

    public void preOrder(TreeNode root) {
        if(root!=null)
        {
            System.out.println(root.data);
            preOrder(root.left);
            preOrder(root.right);
        }
    }
    
     public void postOrder(TreeNode root) {
        if(root!=null)
        {
            preOrder(root.left);
            preOrder(root.right);
            System.out.println(root.data);
        }
    }
    
    public int closestValue(TreeNode root, double target) {
    int closest = root.data;   
    while(root != null){
        if(Math.abs(target - root.data) < Math.abs(target - closest)){
            ret = root.data;
        }      
        root = root.data > target? root.left: root.right;
    }     
    return closest;
}

//leetcode: Lowest common ancestor of Binary Search Tree
 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
      if(root.val > p.val && root.val> q.val) {
         return lowestCommonAncestor(root.left, p, q);
      }else if(root.val<p.val && root.val<q.val) {
         return lowestCommonAncestor(root.right, p, q);
      }else {
          return root; //will always return the immediate root of p and q
      }
    }

}
